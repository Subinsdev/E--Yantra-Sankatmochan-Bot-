// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2020 17:57:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          UART_Transmitter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UART_Transmitter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [7:0] TX_BYTE;
reg TX_DATA_VALID;
// wires                                               
wire O_TX_DONE;
wire O_TX_SERIAL;

// assign statements (if any)                          
UART_Transmitter i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.O_TX_DONE(O_TX_DONE),
	.O_TX_SERIAL(O_TX_SERIAL),
	.TX_BYTE(TX_BYTE),
	.TX_DATA_VALID(TX_DATA_VALID)
);
initial 
begin 
#20000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #20000 1'b1;
	#20000;
end 
// TX_BYTE[ 7 ]
initial
begin
	TX_BYTE[7] = 1'b0;
end 
// TX_BYTE[ 6 ]
initial
begin
	TX_BYTE[6] = 1'b0;
end 
// TX_BYTE[ 5 ]
initial
begin
	TX_BYTE[5] = 1'b0;
end 
// TX_BYTE[ 4 ]
initial
begin
	TX_BYTE[4] = 1'b0;
end 
// TX_BYTE[ 3 ]
initial
begin
	TX_BYTE[3] = 1'b0;
end 
// TX_BYTE[ 2 ]
initial
begin
	TX_BYTE[2] = 1'b0;
end 
// TX_BYTE[ 1 ]
initial
begin
	TX_BYTE[1] = 1'b0;
end 
// TX_BYTE[ 0 ]
initial
begin
	TX_BYTE[0] = 1'b0;
end 

// TX_DATA_VALID
initial
begin
	TX_DATA_VALID = 1'b1;
end 
endmodule

