// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/13/2021 18:43:25"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ADC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ADC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg dout;
reg rst;
reg sclk;
// wires                                               
wire [11:0] ADC_DATA_CH0;
wire [11:0] ADC_DATA_CH1;
wire [11:0] ADC_DATA_CH2;
wire CS_n;
wire din;

// assign statements (if any)                          
ADC i1 (
// port map - connection between master ports and signals/registers   
	.ADC_DATA_CH0(ADC_DATA_CH0),
	.ADC_DATA_CH1(ADC_DATA_CH1),
	.ADC_DATA_CH2(ADC_DATA_CH2),
	.CS_n(CS_n),
	.din(din),
	.dout(dout),
	.rst(rst),
	.sclk(sclk)
);
initial 
begin 
#1000000 $finish;
end 

// dout
initial
begin
	dout = 1'b1;
	dout = #10000 1'b0;
	dout = #20000 1'b1;
	dout = #10000 1'b0;
	dout = #30000 1'b1;
	dout = #10000 1'b0;
	dout = #30000 1'b1;
	dout = #50000 1'b0;
	dout = #10000 1'b1;
	dout = #10000 1'b0;
	dout = #20000 1'b1;
	dout = #10000 1'b0;
	dout = #30000 1'b1;
	dout = #10000 1'b0;
	dout = #10000 1'b1;
	dout = #10000 1'b0;
	dout = #30000 1'b1;
	dout = #20000 1'b0;
	dout = #40000 1'b1;
	dout = #30000 1'b0;
	dout = #10000 1'b1;
	dout = #20000 1'b0;
	dout = #10000 1'b1;
	dout = #10000 1'b0;
	dout = #30000 1'b1;
	dout = #10000 1'b0;
	dout = #10000 1'b1;
	dout = #10000 1'b0;
	dout = #70000 1'b1;
	dout = #30000 1'b0;
	dout = #10000 1'b1;
	dout = #20000 1'b0;
	dout = #10000 1'b1;
	dout = #20000 1'b0;
	dout = #10000 1'b1;
	dout = #20000 1'b0;
	dout = #10000 1'b1;
	dout = #30000 1'b0;
	dout = #10000 1'b1;
	dout = #10000 1'b0;
	dout = #10000 1'b1;
	dout = #20000 1'b0;
	dout = #10000 1'b1;
	dout = #10000 1'b0;
	dout = #10000 1'b1;
	dout = #10000 1'b0;
	dout = #10000 1'b1;
	dout = #20000 1'b0;
	dout = #10000 1'b1;
	dout = #10000 1'b0;
	dout = #20000 1'b1;
	dout = #10000 1'b0;
	dout = #10000 1'b1;
	dout = #20000 1'b0;
	dout = #10000 1'b1;
	dout = #10000 1'b0;
	dout = #30000 1'b1;
	dout = #10000 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// sclk
always
begin
	sclk = 1'b0;
	sclk = #2000 1'b1;
	#2000;
end 
endmodule

