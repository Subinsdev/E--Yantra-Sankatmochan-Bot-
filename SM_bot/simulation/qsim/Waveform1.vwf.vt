// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/02/2021 21:03:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pwm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pwm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg dir_l;
reg dir_r;
reg [13:0] speed_l;
reg [13:0] speed_r;
// wires                                               
wire l_1;
wire l_2;
wire r_1;
wire r_2;

// assign statements (if any)                          
pwm i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.dir_l(dir_l),
	.dir_r(dir_r),
	.l_1(l_1),
	.l_2(l_2),
	.r_1(r_1),
	.r_2(r_2),
	.speed_l(speed_l),
	.speed_r(speed_r)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// dir_l
initial
begin
	dir_l = 1'b1;
end 

// dir_r
initial
begin
	dir_r = 1'b1;
end 
// speed_l[ 13 ]
initial
begin
	speed_l[13] = 1'b0;
end 
// speed_l[ 12 ]
initial
begin
	speed_l[12] = 1'b0;
end 
// speed_l[ 11 ]
initial
begin
	speed_l[11] = 1'b0;
end 
// speed_l[ 10 ]
initial
begin
	speed_l[10] = 1'b0;
end 
// speed_l[ 9 ]
initial
begin
	speed_l[9] = 1'b0;
end 
// speed_l[ 8 ]
initial
begin
	speed_l[8] = 1'b0;
end 
// speed_l[ 7 ]
initial
begin
	speed_l[7] = 1'b0;
end 
// speed_l[ 6 ]
initial
begin
	speed_l[6] = 1'b0;
end 
// speed_l[ 5 ]
initial
begin
	speed_l[5] = 1'b0;
end 
// speed_l[ 4 ]
initial
begin
	speed_l[4] = 1'b0;
end 
// speed_l[ 3 ]
initial
begin
	speed_l[3] = 1'b1;
end 
// speed_l[ 2 ]
initial
begin
	speed_l[2] = 1'b0;
end 
// speed_l[ 1 ]
initial
begin
	speed_l[1] = 1'b0;
end 
// speed_l[ 0 ]
initial
begin
	speed_l[0] = 1'b0;
end 
// speed_r[ 13 ]
initial
begin
	speed_r[13] = 1'b0;
end 
// speed_r[ 12 ]
initial
begin
	speed_r[12] = 1'b0;
end 
// speed_r[ 11 ]
initial
begin
	speed_r[11] = 1'b0;
end 
// speed_r[ 10 ]
initial
begin
	speed_r[10] = 1'b0;
end 
// speed_r[ 9 ]
initial
begin
	speed_r[9] = 1'b0;
end 
// speed_r[ 8 ]
initial
begin
	speed_r[8] = 1'b0;
end 
// speed_r[ 7 ]
initial
begin
	speed_r[7] = 1'b0;
end 
// speed_r[ 6 ]
initial
begin
	speed_r[6] = 1'b0;
end 
// speed_r[ 5 ]
initial
begin
	speed_r[5] = 1'b0;
end 
// speed_r[ 4 ]
initial
begin
	speed_r[4] = 1'b0;
end 
// speed_r[ 3 ]
initial
begin
	speed_r[3] = 1'b1;
end 
// speed_r[ 2 ]
initial
begin
	speed_r[2] = 1'b0;
end 
// speed_r[ 1 ]
initial
begin
	speed_r[1] = 1'b0;
end 
// speed_r[ 0 ]
initial
begin
	speed_r[0] = 1'b0;
end 
endmodule

