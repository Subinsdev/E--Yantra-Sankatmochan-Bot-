module color_sense(
						input clk,
						input c_clk,
						output [2:0]color,
						output s2,
						output s3
);
	
	parameter IDLE = 3'b000;
	parameter RED_START = 3'b001;
	parameter RED_READ = 3'b010;
	parameter GREEN_START = 3'b011;
	parameter GREEN_READ = 3'b100;
	parameter BLUE_START = 3'b101;
	parameter BLUE_READ = 3'b110;
	
	parameter R_THRESH_HIGH = 120;
	parameter R_THRESH_LOW = 100;
	parameter G_THRESH_HIGH = 96;
	parameter G_THRESH_LOW = 68;
	parameter B_THRESH_HIGH = 100;
	parameter B_THRESH_LOW = 73;
	
	reg [7:0]counter = 0;
	reg [7:0]c_counter = 0;
	reg [2:0]r_state = 0;
	reg [1:0]out_color = 0;
	reg out_s2 = 1;
	reg out_s3 = 0;
	
	always@(posedge clk)
	begin
		counter += 1;
		case(r_state)
			IDLE :
				begin
					c_counter = 0;
					out_color = 0;
					out_s2 = 1;
					out_s3 = 0;
					r_state = RED_START;
				end
			RED_START :
				begin
					out_s2 = 0;
					out_s3 = 0;
					counter = 0;
					c_counter = 0;
					r_state = RED_READ;
				end
			RED_READ :
				begin
					if(counter < 300)
						r_state = RED_READ;
						
					else
						begin
						
							if(c_counter < R_THRESH_HIGH && c_counter > R_THRESH_LOW)
								out_color = 1;
							
							r_state = GREEN_START;
						end
				end
			GREEN_START :
				begin
					out_s2 = 1;
					out_s3 = 1;
					counter = 0;
					c_counter = 0;
					r_state = GREEN_READ;
				end
			GREEN_READ :
				begin
					if(counter < 300)
						r_state = GREEN_READ;
						
					else
						begin
						
							if(c_counter < G_THRESH_HIGH && c_counter > G_THRESH_LOW)
								out_color = 2;

								r_state = BLUE_START;
						end
				end
			BLUE_START :
				begin
					out_s2 = 0;
					out_s3 = 1;
					counter = 0;
					c_counter = 0;
					r_state = BLUE_READ;
				end
			BLUE_READ :
				begin
					if(counter < 300)
						r_state = BLUE_READ;
						
					else
						begin
						
							if(c_counter < B_THRESH_HIGH && c_counter > B_THRESH_LOW)
								out_color = 3;
	
							r_state = IDLE;
						end
				end
			default :
				begin
					r_state = IDLE;
				end
		endcase
		
		always@(posedge c_clk)
		begin
			c_counter += 1;
		end
	end 
	assign color = out_color;
	
endmodule
	